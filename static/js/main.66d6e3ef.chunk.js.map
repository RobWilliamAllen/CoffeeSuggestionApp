{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","coffeeType","numberOfCups","origin","flavour","displaySlide1","displaySlide2","filterButtonOpacity","espressoButtonOpacity","setCoffeeTypeFilter","bind","setCoffeeTypeEspresso","setNumberOfCups","setflavour","toggleDisplayedSlide","resetDisplayedSlide","this","setState","event","target","value","displayToggle1","displayToggle2","className","onChange","style","opacity","onClick","setOrigin","React","Component","UserSelections","Math","round","type","FilterButton","EspressoButton","NumberOfCups","min","max","defaultValue","FlavourSlider","id","name","label","NextButton","ReactDOM","render","document","getElementById","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.66d6e3ef.chunk.js","sourcesContent":["\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      coffeeType: '',\n      numberOfCups: 1,\n      origin: '',\n      flavour: 6, \n      displaySlide1: true,\n      displaySlide2: false, \n      filterButtonOpacity: '',\n      espressoButtonOpacity: '',\n    };      \n    \n     this.setCoffeeTypeFilter = this.setCoffeeTypeFilter.bind(this);\n     this.setCoffeeTypeEspresso = this.setCoffeeTypeEspresso.bind(this);\n     this.setNumberOfCups = this.setNumberOfCups.bind(this);    \n     this.setflavour = this.setflavour.bind(this);  \n     this.toggleDisplayedSlide = this.toggleDisplayedSlide.bind(this);  \n     this.resetDisplayedSlide = this.resetDisplayedSlide.bind(this);\n  }\n\n  onClick() {\n      this.setState( {\n      coffeeType: 'Filter Coffee'      \n    });\n  };\n  \n  setCoffeeTypeFilter() {\n    this.setState( {\n      coffeeType: 'Filter Coffee',\n      filterButtonOpacity: '', \n      espressoButtonOpacity: '50%',      \n    });\n  };\n  \n  setCoffeeTypeEspresso() {\n    this.setState( {\n      coffeeType: 'Espresso Coffee',\n      filterButtonOpacity: '50%',\n      espressoButtonOpacity: '',  \n    });\n  };\n  \n  setNumberOfCups(event) {\n    this.setState( {\n       numberOfCups: event.target.value       \n    });\n  }; \n \n  setflavour(event) {\n     this.setState( {\n       flavour: event.target.value    \n    });\n  };  \n  \n  toggleDisplayedSlide() {\n     this.setState( {\n       displaySlide1: false,\n       displaySlide2: true,\n    }); \n  };  \n    \n  resetDisplayedSlide() {\n     this.setState( {\n       displaySlide1: true,\n       displaySlide2: false,\n    }); \n  };  \n  \n  \n  render() {\n    \n   let displayToggle1 = this.state.displaySlide1 ? \"outerContainer\" : \"hideElement\";  \n   let displayToggle2 = this.state.displaySlide2 ? \"outerContainer\" : \"hideElement\";\n                                                    \n    return (\n     <div>\n        <div className={displayToggle1}>          \n          <div className=\"innerContainer boldText\">\n            <div className=\"textContent\">\n              <div className=\"question boldText\"> \n                <p>Fill out the form to get some coffee suggestions</p>\n              </div>\n              <div className=\"question\"> \n                <NumberOfCups onChange={this.setNumberOfCups} />\n              </div>\n              <div className=\"buttonDiv\"> \n                <p>What type of coffee are you making?</p>            \n                <div style={{opacity:this.state.filterButtonOpacity}}>\n                  <FilterButton onClick={this.setCoffeeTypeFilter} /> \n                </div>\n                <div style={{opacity:this.state.espressoButtonOpacity}}>\n                  <EspressoButton onClick={this.setCoffeeTypeEspresso} /> \n                </div>\n              </div>             \n              <div className=\"question\">               \n                  <FlavourSlider  onChange={this.setflavour} />       \n              </div>\n              <div className=\"nextButton question\">\n                <NextButton onClick={this.toggleDisplayedSlide}/>\n              </div>              \n            </div>           \n         </div>\n        </div>\n           <div className={displayToggle2}>  \n            <div className=\"innerContainer\">\n               <div className=\"textContent\">\n                  <UserSelections origin={this.state.origin} \n                                  setOrigin={this.setOrigin} \n                                  numberOfCups={this.state.numberOfCups}      \n                                  coffeeType={this.state.coffeeType}                                  \n                                  flavour={this.state.flavour} \n                                  resetDisplayedSlide={this.resetDisplayedSlide} />\n              </div>\n            </div>              \n         </div>        \n   </div>\n    );\n  } \n} \n\nclass UserSelections extends React.Component { \n  render() {  \n    \n    return (   \n      <div className=\"boldText\">\n        <h2>Here are your coffee reccomendations:</h2>      \n        {\n          this.props.coffeeType === \"Filter Coffee\" ? \n          <div className=\"question\"> \n              <p>Grind size: Coarse <span className=\"resetFontStyle\">because you're making {this.props.coffeeType}</span></p>\n            </div>\n           :\n            <div className=\"question\"> \n              <p>Grind size: Fine <span className=\"resetFontStyle\">because you're making {this.props.coffeeType}</span></p>    \n            </div>\n      }\n       <div className=\"question\"> \n           <p>Use {Math.round(this.props.numberOfCups * 8.3)} grams of coffee for <span className=\"resetFontStyle\">{this.props.numberOfCups} cups.</span></p>           \n        </div>\n        {\n           this.props.flavour < 5  ? \n          <div className=\"question\"> \n               <p>Try coffee from Africa,<span className=\"resetFontStyle\"> which is known for its bright, citrusy flavours. Choose a light roost to retain the beans' naturally fruity flavour.</span></p> \n          </div>\n         : this.props.flavour > 9 ?\n          <div className=\"question\"> \n               <p>Try coffee from Asia,<span className=\"resetFontStyle\"> which is known for its full bodied, earthy flavours. Choose a dark roost for a smokey, nutty flavour</span></p> \n          </div>\n         :  \n          <div className=\"question\"> \n             <p>Try coffee from Central & South America,<span className=\"resetFontStyle\"> which is known for its medium balanced flavours. Choose a medium roost for a balance of body & flavour</span></p>\n          </div>\n      }\n        <div className=\"nextButton question\">\n          <input type=\"button\" value=\"Start Over\" onClick={this.props.resetDisplayedSlide} />       \n        </div>\n      </div>  \n    );\n  } \n} \n\n\nconst FilterButton = ({ onClick }) => (    \n      <button onClick={onClick} type=\"button\">Filter Coffee</button>  \n);\n\nconst EspressoButton = ({ onClick }) => (  \n    <button onClick={onClick} type=\"button\">Espresso Coffee</button>    \n);\n\nconst NumberOfCups  = ({ onChange }) => (  \n  <form>        \n     <label>\n      How many cups are you making? \n      <input type=\"number\" min=\"1\" max=\"12\" defaultValue=\"1\" onChange={onChange} />       \n     </label>            \n  </form> \n);\n\nconst FlavourSlider = ({ onChange }) => (\n <div>\n    <p>What taste do you prefer in your coffee?</p>\n    <p className=\"smallText resetFontStyle\">Fruity, bright, citrusy\n          <input  onChange={onChange} type=\"range\" id=\"Flavour\" name=\"Flavour\"\n                 min=\"1\" max=\"12\" label=\"Flavour\" defaultValue=\"6\" />\n             Earthy, full bodied, chocolatey</p>\n    </div>\n);\n\nconst NextButton = ({ onClick }) => (  \n    <button onClick={onClick} type=\"button\">Next</button>  \n);  \n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}